<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Task Management System</h1>
    <form id="taskForm">
        <input type="text" name="task" id="taskInput" placeholder="Enter a new task">
        <button type="submit" id="addTask">Add Task</button>
    </form>
    <!-- <div id="taskList"> -->
        <div id="taskList">
            
        </div>
        <!-- <div class="task">
            <p>Task 1</p>
            <button class="btn completeBtn undoBtn">Complete/Undo</button>
            <button class="btn deleteBtn">Delete</button>
        </div>
        <div class="task strike">
            <p>Task 2</p>
            <button class="btn completeBtn undoBtn">Complete/Undo</button>
            <button class="btn deleteBtn">Delete</button>
        </div>
    </div> -->
    <script src="script.js"></script>
</body>
</html>

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body{
    width: 100%;
    height: 100vh;
    background-color: #f2f2f2;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 10px;
}
#taskForm{
    width: 100%;
    max-width: 400px;
    min-height: 200px;
    padding: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    /* background-color: red; */
}
#taskInput{
    width: 100%;
    max-width: 200px;
    min-height: 30px;
    padding: 8px 12px;
}
#addTask{
    width: 100%;
    max-width: 120px;
    padding: 8px 5px;
    border: none;
    border-radius: 5px;
    background-color: violet;
    color: white;
    cursor: pointer;
}
#taskList{
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
}
.task{
    width: 100%;
    max-width: 200px;
    padding: 10px;
    background-color: white;
    box-shadow: 0px 0px 7px rgba(0,0,0,0.5);
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 10px;
}

.task button{
    width: 100%;
    padding: 5px 8px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.task button:nth-of-type(1){
    background-color: yellow;
}
.task button:nth-of-type(2){
    color: white;
    background-color: red;
}
.strike{
    background-color: lightgreen;
    text-decoration: line-through;
}

interface Task{
    title:string;
    isCompleted: boolean;
}

const tasks: Task[] = [];

const form = document.getElementById('taskForm') as HTMLFormElement;

form.addEventListener('submit',function (event){
    event.preventDefault()
    const title = (document.getElementById('taskInput') as HTMLInputElement).value
    if(!title) return;
    tasks.push({title, isCompleted: false});
    render()
    this.reset()
})

function render():void{
    const taskList = document.getElementById('taskList') as HTMLElement;
    taskList.innerHTML = ``;
    tasks.forEach((task, index)=>{
        const divEle:HTMLDivElement = document.createElement('div');
        divEle.className = task.isCompleted ? 'task strike' : 'task';
        divEle.innerHTML = `
        <p>${task.title}</p>
        <button onclick="completeTask(${index})">${task.isCompleted ? 'Undo' : 'Complete'}</button>
        <button onclick="deleteTask(${index})">Delete</button>
        `;
        taskList.appendChild(divEle);
    })
}

function completeTask(index: number): void{
    tasks[index].isCompleted = !tasks[index].isCompleted;
    render()
}
function deleteTask(index: number):void{
    tasks.splice(index,1)
    render()
}